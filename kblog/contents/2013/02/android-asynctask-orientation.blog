Subject: Androidの非同期処理と画面回転
Content-type: html/text
Tags: android, java, メモ
Date: 2013/02/16
Public: yes


※<a href="/2015/04/10/android-x86-4.4-setup.html">Android-x86-4.4r2 の設定はこちら</a>
<br><br>

<br />
Androidで非同期処理を Thread でやろうとするとこんな例外が出て怒られる。<br />
<br />
<blockquote class="tr_bq">
<code>android.view.ViewRootImpl$CalledFromWrongThreadException<wbr></wbr>: Only the original thread that created a view hierarchy can touch its views.</code></blockquote>
UI スレッド以外が UI を操作出来ないって事らしい。<br />
<br />
普通は Handler か AsyncTask を使えば回避できるのだが、ここで一つ問題が発生する。<br />
<br />
Android のデフォルト動作では画面が回転すると Activity の破棄と再構築が行われる。<br />
したがって AsyncTask が処理を終らせて結果を Activity に通知しようとしても既に存在しない可能性がある。<br />
<br />
とりあえずの解決法としては AndroidManifest.xml の &lt;activity&gt; タグに以下の属性を追加して回転しても再構築を行わせないようにすることができる。<br />
<br />
<blockquote class="tr_bq">
<code>android:configChanges="orientation|keyboardHidden"</code>
</blockquote>
<br />
とは言えこれで逃げられないケースも有るのでまじめな対策を考える。<br />
<br />
そもそも、Android の Activity はテンポラリな物で何時破棄されてもおかしく無いという位置付けになっている。にもかかわらずアプリケーションは Activity を中心に設計するようになっているので問題が発生しているように思える。<br />
<br />
ここのページの方は Activity はあくまで「従」立場で使えとおっしゃってますが現実には色々難しいかと思います。既存のコードも有るし。<br />
<ul>
<li><a href="http://tech.cm55.com/wiki/Android/View_not_attached_to_window_manager">http://tech.cm55.com/wiki/Android/View_not_attached_to_window_manager</a></li>
</ul>
<br />
<br />
問題の本質は「主」である Activity が「従」である AsyncTask の知らない間に入れ替わってしまっていることだ。<br />
<br />
朝、出社したら課長の席に知らないおじさんが座っているようなものである。<br />
<br />
こういう場合は人事課に現在の所属課の課長が誰なのか問い合わせられれば良いわけだけど Android にはそういう仕掛けが用意されていない。<br />
<br />
と言うわけで、Activity を ID で管理するクラスを用意して AsyncTask は ID から必要な時に Activity 問い合わせる方式で実装しみた。<br />
<br />
<h4>
ソースコード</h4>
<br />
ActivityManager.java:<br />
<ul>

</ul>
<blockquote class="tr_bq">
<code>
package org.kotemaru.android.asyncrotate;<br /><br />import java.util.HashMap;<br />import android.app.Activity;<br />import android.app.Application.ActivityLifecycleCallbacks;<br />import android.os.Bundle;<br /><br />/**<br />&nbsp;* Activityの管理クラス。<br />&nbsp;* - Activityが destroy/create されても同一IDで継続的にアクセスできる。<br />&nbsp;* - インスタンスをApplication.registerActivityLifecycleCallbacks()に設定する事。<br />&nbsp;* - Bundle のキー "___ACTIVITY_ID___" を汚染する。<br />&nbsp;* @author kotemaru.org<br />&nbsp;*/<br />public class ActivityManager implements ActivityLifecycleCallbacks {<br />&nbsp;&nbsp;&nbsp; public final String ACTIVITY_ID = "___ACTIVITY_ID___";<br />&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; /** Application内で一意のActivityのIDカウンタ */<br />&nbsp;&nbsp;&nbsp; private Integer nextActivityId = 0;<br />&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; // マップ<br />&nbsp;&nbsp;&nbsp; private HashMap<string ctivity=""> aid2activity = new HashMap<string ctivity="">();<br />&nbsp;&nbsp;&nbsp; private HashMap<activity tring=""> activity2aid = new HashMap<activity tring="">();<br /><br />&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; /**<br />&nbsp;&nbsp;&nbsp; &nbsp;* ActivityからIDの取得。<br />&nbsp;&nbsp;&nbsp; &nbsp;* - すでにIDを持っている場合はそれを返す。<br />&nbsp;&nbsp;&nbsp; &nbsp;* - IDを持っていない場合はマップに新規登録して返す。<br />&nbsp;&nbsp;&nbsp; &nbsp;* @param activity<br />&nbsp;&nbsp;&nbsp; &nbsp;* @return Application内で一意のID<br />&nbsp;&nbsp;&nbsp; &nbsp;*/<br />&nbsp;&nbsp;&nbsp; public synchronized String getActivityId(Activity activity) {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; String aid = activity2aid.get(activity);<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; if (aid == null) {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; aid = (nextActivityId++).toString();<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; aid2activity.put(aid, activity);<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; activity2aid.put(activity, aid);<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; return aid;<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; /**<br />&nbsp;&nbsp;&nbsp; &nbsp;* IDからActivityの取得。<br />&nbsp;&nbsp;&nbsp; &nbsp;* - 登録されているIDからActivityを引いて返す。<br />&nbsp;&nbsp;&nbsp; &nbsp;* - Activity が destroy/create されていてると更新されている。<br />&nbsp;&nbsp;&nbsp; &nbsp;* @param aid ActivityのID<br />&nbsp;&nbsp;&nbsp; &nbsp;* @return Activity。未登録の場合はnull。<br />&nbsp;&nbsp;&nbsp; &nbsp;*/<br />&nbsp;&nbsp;&nbsp; public synchronized Activity getActivity(String aid) {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; return aid2activity.get(aid);<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; /**<br />&nbsp;&nbsp;&nbsp; &nbsp;* Activity.onCreate()のハンドリング。<br />&nbsp;&nbsp;&nbsp; &nbsp;* - Bundleに ___ACTIVITY_ID___ を持っていればマップを更新。<br />&nbsp;&nbsp;&nbsp; &nbsp;*/<br />&nbsp;&nbsp;&nbsp; @Override<br />&nbsp;&nbsp;&nbsp; public void onActivityCreated(Activity activity, Bundle savedInstanceState) {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; if (savedInstanceState == null) return; // First<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; String aid = savedInstanceState.getString(ACTIVITY_ID);<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; if (aid == null) return; // Not managed.<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; synchronized (this) {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; aid2activity.put(aid, activity);<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; activity2aid.put(activity, aid);<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; /**<br />&nbsp;&nbsp;&nbsp; &nbsp;* Activity.onSaveInstanceState()のハンドリング。<br />&nbsp;&nbsp;&nbsp; &nbsp;* - ___ACTIVITY_ID___ にActivityのIDを保存。<br />&nbsp;&nbsp;&nbsp; &nbsp;*/<br />&nbsp;&nbsp;&nbsp; @Override<br />&nbsp;&nbsp;&nbsp; public void onActivitySaveInstanceState(Activity activity, Bundle outState) {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; String aid = activity2aid.get(activity);<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; outState.putString(ACTIVITY_ID, aid);<br />&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp; /**<br />&nbsp;&nbsp;&nbsp; &nbsp;* Activity.onDestroy()のハンドリング<br />&nbsp;&nbsp;&nbsp; &nbsp;* - マップからActivityを削除。<br />&nbsp;&nbsp;&nbsp; &nbsp;* - Activityインスタンス開放の為、必須。<br />&nbsp;&nbsp;&nbsp; &nbsp;*/<br />&nbsp;&nbsp;&nbsp; @Override<br />&nbsp;&nbsp;&nbsp; public synchronized void onActivityDestroyed(Activity activity) {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; String aid = activity2aid.get(activity);<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; if (aid == null) return; // Not managed activity.<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; aid2activity.put(aid, null);<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; activity2aid.remove(activity);<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; @Override<br />&nbsp;&nbsp;&nbsp; public void onActivityStarted(Activity activity) {<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; @Override<br />&nbsp;&nbsp;&nbsp; public void onActivityResumed(Activity activity) {<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; @Override<br />&nbsp;&nbsp;&nbsp; public void onActivityStopped(Activity activity) {<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; @Override<br />&nbsp;&nbsp;&nbsp; public void onActivityPaused(Activity activity) {<br />&nbsp;&nbsp;&nbsp; }<br /><br />}</activity></activity></string></string></code></blockquote>
<br />
AsyncHelperApplication.java:<br />
<ul>

</ul>
<blockquote class="tr_bq">
<code>
package org.kotemaru.android.asyncrotate;<br />
<br />
import android.app.Application;<br />
<br />
public class AsyncHelperApplication extends Application {<br />
&nbsp;&nbsp;&nbsp; private ActivityManager activityManager = new ActivityManager();<br />
<br />
&nbsp;&nbsp;&nbsp; @Override<br />
&nbsp;&nbsp;&nbsp; public void onCreate() {<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // API14 からサポートのActivityのライフサイクルのコールバック設定。<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; registerActivityLifecycleCallbacks(activityManager);<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; @Override<br />
&nbsp;&nbsp;&nbsp; public void onTerminate() {<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; public ActivityManager getActivityManager() {<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; return activityManager;<br />
&nbsp;&nbsp;&nbsp; }<br />
}</code></blockquote>
MainActivity.java: <br />
<ul>

</ul>
<blockquote class="tr_bq">
<code>
package org.kotemaru.android.asyncrotate;<br /><br />import android.app.Activity;<br />import android.os.Bundle;<br />import android.view.Menu;<br />import android.widget.TextView;<br /><br />public class MainActivity extends Activity {<br /><br />&nbsp;&nbsp;&nbsp; @Override<br />&nbsp;&nbsp;&nbsp; protected void onCreate(Bundle savedInstanceState) {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; super.onCreate(savedInstanceState);<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; setContentView(R.layout.activity_main);<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // 3秒後にメッセージを書き換えるタスクを起動<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; TextView m = (TextView) this.findViewById(R.id.message);<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; new SlowAsyncTask(this).execute(m.getText()+"{3sec}");<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; @Override<br />&nbsp;&nbsp;&nbsp; public boolean onCreateOptionsMenu(Menu menu) {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; getMenuInflater().inflate(R.menu.activity_main, menu);<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; return true;<br />&nbsp;&nbsp;&nbsp; }<br />}</code></blockquote>
<br />
SlowAsyncTask.java:<br />
<ul>

</ul>
<blockquote class="tr_bq">
<code>
package org.kotemaru.android.asyncrotate;<br /><br />import android.app.Activity;<br />import android.os.AsyncTask;<br />import android.widget.TextView;<br /><br />public class SlowAsyncTask extends AsyncTask<string string="" void=""> {<br />&nbsp;&nbsp;&nbsp; private ActivityManager activityManager; <br />&nbsp;&nbsp;&nbsp; private String activityId;<br />&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; public SlowAsyncTask(Activity activity) {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; activityManager = ((AsyncHelperApplication)activity.getApplication()).getActivityManager();<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // Activity の ID を取得して保存。<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; activityId = activityManager.getActivityId(activity);<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; @Override<br />&nbsp;&nbsp;&nbsp; protected String doInBackground(String... params) {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // 時間のかかる非同期処理。<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; try {Thread.sleep(3000);} catch (Exception e) { }<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; return params[0];<br />&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp; @Override<br />&nbsp;&nbsp;&nbsp; protected void onPostExecute(String result) {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // Activityは保存しておいたIDから取得する。<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Activity activity = activityManager.getActivity(activityId);<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; TextView message = (TextView) activity.findViewById(R.id.message);<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; message.setText(result);<br />&nbsp;&nbsp;&nbsp; }<br />}</string><code></code></code></blockquote>
<h4>
ソースの解説</h4>
<code>とりあえずこれでちゃんと動作している。</code><br />
<br />
<code>API14 からサポートされた ActivityLifecycleCallbacks を利用して Activity の create/destory をフックし入れ替わりを管理している。ID の保存の為に Activity の Bundle を１つ汚染することになるが最小限だろう。</code><br />
<br />
<code>AsyncTask.onPostExecute()が create と destory の間に発生する事を危惧したが起こり得ないようである。</code><code>onPostExecute() は</code><code> UI スレッドで呼ばれる事が保証されているので UI の準備の整わない状態で呼ばれないと解釈した。</code><br />
<code><br /></code>
<code><br /></code>
<code><br /></code>
<code><br /></code>

