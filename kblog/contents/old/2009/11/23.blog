Subject: WSJSの使い方、その５（疑似スレッド:EXJS）
Content-type: html/text
Tags: WSJS
Date: 2009/11/23
Public: yes

JavaScriptはスレッドを持っていない為、
処理待ちを行うには複雑な非同期処理を記述しなければなりません。
これはアプリケーションの実装において大きな負担となっていました。
<p/>
WSJSは非同期処理を同期処理の様に記述できる機能を提供しています。
この機能を使うと疑似的にスレッドが使えます。
<p/>
疑似スレッドを使用するには幾つか手順があります。
<ul>
<li>拡張子を .exjs としたファイルで関数を定義すること。
<li>関数の中で yield 演算子を使用すること。
<li>関数の戻り値に対し next() 関数を呼び出すこと。
</ul>

実際に動かしてみます。<br/>
以下のサンプルコードを d:/test/exjs/ に置きます。

<img width="500px" src="/old/img/auone/wsjs/docs/images/tutorial-web/exjs-files.png"/>
<p/>
steps.html:
<textarea readonly="true" wrap="off" style="width:100%;height:250px;font-size:12px;" >
<html>
	<head>
		<script language="javascript" src="../lib/json2.js"></script>
		<script language="javascript" src="steps.exjs"></script>
		<script language="javascript" src="steps.rpjs"></script>
	</head>

	<body >
		<input type="button" value="GO-1" onclick="startSteps('disp1').next()"/>
		<nobr id="disp1" style="border:2px solid blue;">.</nobr>
		<br/><br/>
		<input type="button" value="GO-2" onclick="startSteps('disp2').next()"/>
		<nobr id="disp2" style="border:2px solid blue;">.</nobr>
		<br/><br/>
		<input type="button" value="GO-3" onclick="startSteps('disp3').next()"/>
		<nobr id="disp3" style="border:2px solid blue;">.</nobr>
	</body>
</html>
</textarea>
<p/>
steps.exjs: 疑似スレッドとなる関数
<textarea readonly="true" wrap="off" style="width:100%;height:120px;font-size:12px;" >
function startSteps(id) {
	var disp = document.getElementById(id);
	disp.innerHTML = "start";
	disp.innerHTML += " > " + yield step1Async(__This);
	disp.innerHTML += " > " + yield step2Async(__This);
	disp.innerHTML += " > " + yield step3Async(__This);
}
</textarea>
<p/>
steps.jscp: サーバ側で時間のかかる関数
<textarea readonly="true" wrap="off" style="width:100%;height:150px;font-size:12px;" >
function step1() {
	java.lang.Thread.sleep(3000);
	return "step1";
}
function step2() {
	java.lang.Thread.sleep(3000);
	return "step2";
}
function step3() {
	java.lang.Thread.sleep(3000);
	return "done";
}
</textarea>
<p/>
http://localhost:8080/wsjs/exjs/steps.html にアクセスします。<br/>
「GO-1」をクリックしてスレッドを開始します。
<img width="500px" src="/old/img/auone/wsjs/docs/images/tutorial-web/exjs-step-1.png"/>

「GO-3」,「GO-2」をクリックして各々のスレッドを開始します。
<img width="500px" src="/old/img/auone/wsjs/docs/images/tutorial-web/exjs-step-3.png"/>

各々のスレッドは独立して進行していきます。
<img width="500px" src="/old/img/auone/wsjs/docs/images/tutorial-web/exjs-step-4.png"/>

最終的に全てのスレッドが完了します。
<img width="500px" src="/old/img/auone/wsjs/docs/images/tutorial-web/exjs-step-6.png"/>
<p/>

「GO-1」のスレッドが開始した後もボタンの操作は可能ですし、
他のスレッドも開始できています。
</p>
steps.html について説明します。
<ul>
<li>steps.exjs で疑似スレッドとなる関数を読み込んでいます。
<li>steps.rpjs で時間のかかるサーバ側関数を読み込んでいます。
<li>onclick="startSteps(～).next()" で疑似スレットを起動してます。
</ul>

steps.exjs について説明します。
<ul>
<li>関数 startSteps() が疑似スレッド関数となります。
<li>yield step1Async(__This) はサーバ側関数の step1() を非同期に呼び出しています。
<li>非同期呼び出しを行う場合は関数名の後に "Async" を付けて最初の引数に __This を渡します。
<li>引数で渡されたノードに進行状況を書き込みます。
</ul>

steps.jscp について説明します。
<ul>
<li>時間のかかる処理のダミーとして３秒間スリープしています。
</ul>

<p/>
yield の仕様については以下を参照してください。
https://developer.mozilla.org/ja/New_in_JavaScript_1.7<br/>
尚、__This はWSJSの独自拡張でジェネレータの返したイテレータを示しています。


