Subject: WSJSの使い方、その１（Webサーバ） 
Content-type: lovelog/text
Tags: WSJS
Date: 2009/11/20
Public: yes

WSJSの最も基本的な使い方は単純なWebサーバとしての使い方です。

環境設定の documentRoot に指定したディレクトリの配下がそのままServlet のコンテンツとして公開されます。

まず、WSJSを導入します。
/old/img/auone/wsjs/docs/install.html

http://localhost:8080/wsjs/admin/ にアクセスしてルートディレクトリを指定します。
<img width="500px" src="/old/img/auone/wsjs/docs/images/tutorial-web/ie-admin-1.png"/>

指定したディレクトリにHTMLファイルを置きます。
<img width="500px" src="/old/img/auone/wsjs/docs/images/tutorial-web/files-test.png"/>

test.html:
<pre style="border: 1px solid black; overflow:auto;">
&lt;html>
	&lt;body>
		&lt;div>Hello world&lt;/div>
	&lt;/body>
&lt;/html>
</pre>


http://localhost:8080/wsjs/test.html にアクセスすると test.html が表示されます。
又、編集結果はすぐに反映されます。
<img width="500px" src="/old/img/auone/wsjs/docs/images/tutorial-web/ie-test.png"/>


Subject: WSJSの使い方、その２（テストサーバ:SSJS）
Content-type: lovelog/text
Tags: WSJS
Date: 2009/11/20
Public: yes

WSJSの便利な使い方はテストサーバとしての使い方です。

WSJSは Servlet を JavaScript で記述する機能を持っています。
特殊なヘッダを返す様なテストページをコンパイルもデプロイもすること無くファイルを１つ置くだけで作る事ができます。

ディレクトリに拡張子を .ssjs としたファイルを置きます。
<img width="500px" src="/old/img/auone/wsjs/docs/images/tutorial-web/files-403-test.png"/>


d:/test/docroot/403-test.ssjs:
<pre style="border: 1px solid black; overflow:auto;">
function doGet(req, res) {
	res.setStatus(403);
	res.setHeader("X-Custom-header", "custom-data");
	var message = "Accsess denied.";
	var html = &lt;html>&lt;body>&lt;div>{message}&lt;/div>&lt;/body>&lt;/html>;
	res.getWriter().write( html );
}
</pre>


そして、http://localhost:8080/wsjs/403-test.ssjs にアクセスし FireBug でヘッダを確認してみます。
指定した通りの結果が返されています。
<img width="500px" src="/old/img/auone/wsjs/docs/images/tutorial-web/ff-403-test.png"/>


403-test.ssjs について解説します。
関数 doGet() は Servlet の doGet() と全く同じ意味です。
引数の req,res は HttpServletRequest,HttpServletResponse のインスタンスです。
WSJSは JavaScript に Rhino を使っていますので Java のインスタンスはほぼそのまま使用できます。

2,3行目は HttpServletResponse のメソッドを使って終了コードとカスタムのヘッダを設定しています。
4,5行目は Rhino の E4X 記法を使って応答の本文を生成しています。{message} は変数 message の内容に置き換わります。
6行目で本文を書き出して終了です。

POST メソッドを受けたければ同様に doPost() 関数を定義します。
おそらく Servlet の実装をした事の有る人であれば何も考えずに使えるでしょう。

RhinoでJavaScriptからjavaを使う方法は以下のページが詳しいです。
https://developer.mozilla.org/ja/Core_JavaScript_1.5_Guide/LiveConnect_Overview

E4Xの使い方は以下のページが詳しいです。
https://developer.mozilla.org/ja/E4X_Tutorial


Subject: WSJSの使い方、その３（リモート呼出:RPJS）
Content-type: html/text
Tags: WSJS
Date: 2009/11/20
Public: yes

<style>
img {-ms-interpolation-mode: bicubic;}
</style>

SSJSを使うことで御手軽にServletが作れる様になりました。<br/>
しかし、クライアントから特にJavaScriptから呼び出そうとすると
パラメータを作りURLを合成してXMLHttpRequestを作って呼び出さなければなりません。
<p/>
JavaScriptからJavaScriptを呼び出すのに何でこんな面倒なことしなきゃいけないの？<br/>
と思うのが人情です。
<p/>
WSJSでは拡張子を .rpjs とするだけでクライアントからサーバ内のJavaScriptを呼び出せます。
コンパイルもデプロイも必要有りません。<br/>
<br/>
ディレクトリに拡張子を .rpjs としたファイルとそれを&lt;script>タグで読み込むHTMLファイルを置きます。
<br/>
<img width="500px" src="/old/img/auone/wsjs/docs/images/tutorial-web/rpjs-files.png"/>

<br/>
<dl>d:/test/docroot/rpjs/call-rpjs.html:<dd>
<pre style="border: 1px solid black; overflow:auto;">
&lt;html>
	&lt;head>
		&lt;meta http-equiv="content-type" content="text/html; charset=utf-8">&lt;/meta>
		&lt;script src="../lib/json2.js">&lt;/script>
		&lt;script src="hello.rpjs">&lt;/script>
	&lt;/head>
	&lt;body>
		&lt;input type="button" value="Hello"
			onclick="alert(  hello(navigator.userAgent)  );" />
	&lt;/body>
&lt;/html>
</pre>
</dl>

<br/>
<dl>d:/test/docroot/rpjs/hello.rpjs:<dd>
<pre style="border: 1px solid black; overflow:auto; height:80px;">
function hello(name) {
	return "Hello "+name
		+". \n\nI am " +java.lang.System.getProperty("os.name");
}
</pre>
</dl>
<br/>
http://localhost:8080/wsjs/rpjs/call-rpjs.html にアクセスします。
<img width="500px" src="/old/img/auone/wsjs/docs/images/tutorial-web/rpjs-html.png"/>
<br/>

「Hello」ボタンをクリックします。
<img width="500px" src="/old/img/auone/wsjs/docs/images/tutorial-web/rpjs-alert.png"/>

分かり難いですがサーバ側の os.name を応答しています。
<p/>
call-rpjs.html から解説します。
<ul>
<li>最初に読み込んでいる json2.js は通信用のライブラリでRPJSに必要です。
私の著作物で無いので意図的に分離しています。
<li>次に読み込んでいる hello.rpjs がサーバ側関数です。実際には通信を行うスタブが返されます。
<li>onclick の中で呼んでいる hello() はサーバ側で実行され戻り値はクライアントに返されます。
</ul>

hello.rpjs を解説します。
<ul>
<li>単純にJavaScript関数を定義しているだけです。
<li>java.lang.System は Rhino の Java 呼び出し機能でサーバ側で動作している事を確認する為使っています。
</ul>

<p>
通信にはJSON-RPCと言うプロトコルを使用しています。<br/>
興味のある方はこちらからどうぞ。<a href="http://json-rpc.org/">http://json-rpc.org/</a>
</p>


