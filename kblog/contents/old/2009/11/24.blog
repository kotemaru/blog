Subject: WSJSの使い方、その６（組み合せ技）
Content-type: html/text
Tags: WSJS
Date: 2009/11/24
Public: yes

WSJSの各々の機能を組み合わせて使ってみます。<br/>
データベース上のシステムテーブルの内容を全部表示するサンプルです。<br/>
SELECT を選択すると非同期でデータベースにアクセスし表示用&lt;table>を更新します。
<p/
d:/test/rocroot/mix/ にサンプルコードを置きます。
<img width="500px" src="/old/img/auone/wsjs/docs/images/tutorial-web/mix-files.png"/>

<p/>
sysTable.html:
<textarea readonly="true" wrap="off" style="width:100%;height:250px;font-size:12px;" >
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
                   "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja"
      xmlns:jscp="http://jscp/">
	<head>
		<script src="../lib/json2.js"></script>
		<script src="../lib/JSCP.js"></script>
		<script src="getSysTable.rpjs"></script>
		<script src="getSysTable.exjs"></script>
		<script>
			var tableData = getSysTable("SYSTABLES");
		</script>
	</head>
	<body onload="JSCP.init()" onresize="JSCP.resize();">
		<jscp:jscp>
		<!--
		<select onchange="getSysTableAndView(this.value).next()">
			<% for (var i=0; i<tableData.length; i++) { %>
			<option value="<%= tableData[i].TABLENAME%>"><%= tableData[i].TABLENAME%></option>
			<% } %>
		</select>
		-->
		</jscp:jscp>
		<hr/>

		<jscp:jscp id="tableView">
		<!--
			<table border="1" >
			<% if (tableData.length>0) { %>
				<tr>
				<% for (var name in tableData[0]) { %>
					<th><%= name%></th>
				<% } %>
				</tr>
			<% } %>
			<% for (var i=0; i<tableData.length; i++) { %>
				<tr>
				<% for (var name in tableData[i]) { %>
					<td><%= tableData[i][name]%></td>
				<% } %>
				</tr>
			<% } %>
			</table>
		-->
		</jscp:jscp>
	</body>
</html>
</textarea>
<p/>

getSysTable.exjs: 非同期処理の関数です。
<textarea readonly="true" wrap="off" style="width:100%;height:80px;font-size:12px;" >
function getSysTableAndView(table) {
	tableData = yield getSysTableAsync(__This, table);
	JSCP.applyById("tableView");
}
</textarea>

<p/>
getSysTable.rpjs: データベースの内容を JSON に変換して返すサーバ側関数です。
<textarea readonly="true" wrap="off" style="width:100%;height:250px;font-size:12px;" >
function getSysTable(table) {
	var connect = __ENV__.getDBConnection();
	try {
		var st = connect.createStatement();
		var rset = st.executeQuery("SELECT * FROM SYS."+table);
		var meta = rset.getMetaData();
		var json = [];
		while (rset.next()) {
			var record = {};
			for (var i=1; i<=meta.columnCount; i++) {
				record[meta.getColumnName(i)] = rset.getString(i);
			}
			json.push(record);
		}
		return json;
	} finally {
		connect.close();
	}
}
</textarea>

<p/>
http://localhost:8080/wsjs/mix/sysTable.html にアクセスします。<br/>
<img width="500px" src="/old/img/auone/wsjs/docs/images/tutorial-web/mix-table.png"/>
<br/>
データベースの内容が表示されています。
<p/>
sysTable.html について説明します。
<ul>
<li>.js の読み込みは割愛します。
<li>tableData の初期値として SYSTABLES の内容を得ています。
<li>&lt;select>タグをこの内容で初期化しています。
<li>&lt;select>タグの onchange でテーブルの更新スレッドを起動しています。
</ul>
getSysTable.exjs について説明します。
<ul>
<li>yield を使って非同期でデータベースにアクセスします。
<li>データベースの応答を受け取った後、&lt;table> を更新しています。
</ul>
getSysTable.rpjs について説明します。
<ul>
<li>__ENV__ は実行環境を表すシステム変数で実行環境にアクセスする為の機能を提供します。
<li>getDBConnection() はデータベースへの接続を得る関数で戻り値は java.sql.Connection です。
<li>データベースへのアクセスは JDBC をそのまま使います。
<li>ResultSet の内容を json 変数にそのままコピーして戻り値としています。
</ul>

このサンプルは
「EXJS から RPJS を呼び出しその結果を JSCP で表示する。」
と言うWSJSを使う上で基本的なパターンとなります。


