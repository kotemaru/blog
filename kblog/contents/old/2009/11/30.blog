Subject: GAE/JのJDOで実装
Content-type: html/text
Tags: GAE/J
Date: 2009/11/30
Public: yes

GAE対応の為にローカルファイルにアクセスしていた所を抽象化して
JDOでも実装する事にした。
<p/>
JDO(Java Data Objects)がそもそも何かって言うとJavaのオブジェクトを
永続化して保存／復元できる様にする仕組み、
EntityBean とか似たようなのは幾つか有ったはずだけど
結局どれもうまく行って無いから新しいのが出て来ちゃうんだろうね。
<p/>
JDOを利用する手順は<ol>
<li>${appengine.sdk.dir}/lib/user/orm/*.jar を war/WEB-INF/lib/ にコピーする。
<li>保存したいクラスにアノテーションを付けて宣言する。
<li>PersistenceManager を使って保存／復元する。
</ol>
となる。
<p/>
保存用クラスにアノテーションを付ける。
<ul>
<li>class に @PersistenceCapable(...)
<li>保存対象のフィールドに @Persistent
<li>主キーのフィールドに @PrimaryKey
<li>主キーは必ず必要で long 又は String である事。
</ul>
<pre  >
             :
import javax.jdo.annotations.PersistenceCapable;
import javax.jdo.annotations.Persistent;
import javax.jdo.annotations.PrimaryKey;
import com.google.appengine.api.datastore.Blob;

@PersistenceCapable(identityType = IdentityType.APPLICATION)
public class PageInfoJDO {

	@PrimaryKey
	@Persistent
	private String  pageName;

	@Persistent
	private long    lastModified;

	@Persistent
	private boolean isDirectory;

	@Persistent
	private long    length;

	@Persistent
	private Blob    body = null;

	// setter/getter は必要。
</pre>

<p/>
オブジェクトを保存する。
<ul>
<li>PersistenceManager.makePersistent() を呼ぶだけ。
<li>トランザクションはオブジェクト１個だけの場合は本来必要無い。
<li>PersistenceManagerFactoryは使い回せとドキュメントに書いて有った。
</ul>
<pre >
	public static void putPageInfo(PageInfoJDO info) {
		PersistenceManager pm = getPMF().getPersistenceManager();
		Transaction tx = pm.currentTransaction();
		tx.begin();
   		try {
			pm.makePersistent(info);
			tx.commit();
		} finally {
			if (tx.isActive()) tx.rollback();
			pm.close();
		}
	}
	public static PersistenceManagerFactory getPMF() {
		if (PMF == null) {
			PMF = JDOHelper.getPersistenceManagerFactory("transactions-optional");
		}
		return PMF;
	}
</pre>
<p/>
オブジェクトを取得する。
<ul>
<li>クエリを実行して復元オブジェクトを受け取る。
<li>クエリの生成方法はいろいろ有るので PersistenceManager の apidoc を読むべし。
<li>PersistenceManagerFactoryは使い回せとドキュメントに書いて有った。
</ul>
<pre >
	public static PageInfoJDO getPageInfo(String pageName, boolean withBody) {
		PersistenceManager pm = getPMF().getPersistenceManager();
		try {
			List&lt;PageInfoJDO> sel = (List&lt;PageInfoJDO>) pm.newQuery(PageInfoJDO.class, "pageName=='"+pageName+"'").execute();
			if (sel.size() == 0) return null;
			PageInfoJDO info = sel.get(0);
			if (withBody) info.getBytes();
			return info;
		} finally {
			pm.close();
		}
	}
</pre>

<p/>
と、結果だけを書いたが実はここまで来るのにかなりはまっている。
<p/>
最初にはまった例外。
<pre style="width:100%;">
org.datanucleus.exceptions.ClassNotPersistableException: The class "kotemaru.wsjs.gae.PageInfoJDO" is not persistable. This means that it either hasnt been enhanced, or that the enhanced version of the file is not in the CLASSPATH (or is hidden by an unenhanced version), or the Meta-Data/annotations for the class are not found.
</pre>
<p/>
どうみても PageInfoJDO の宣言が効いていない。
しかし、いくらドキュメントを読み直してもこれ以上の宣言も設定も必要無い。<br/>
で、デモの build.xml を調べてやっと分かった。<br/>
コンパイル後のクラスを再加工する必要が有ったのだ。
<p/>
<textarea readonly="true" wrap="off"  rows="10" style="width:100%;">
  <property name="appengine.sdk.dir" location="/～/appengine-java-sdk-1.2.6"/>
  <import file="${appengine.sdk.dir}/config/user/ant-macros.xml"/>
                :

  <target name="datanucleusenhance" depends="compile"
      description="Performs JDO enhancement on compiled data classes.">
    <enhance_war war="war" />
  </target>
</textarea>
<p/>

これがチュートリアルの手順にはどこにも書いて無い。
なぜかと言うと Eclips 環境だとかってにやってくれるから。
別のマニュアルにはチョロっと書いて有ったけどチュートリアルでも
一言ぐらい言及しろつーの、通常のJavaと手順が違うんだから。

<p/>
次にはまったのがトランザクションなんだけど疲れたのでまた明日。


