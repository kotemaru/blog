Subject: GAE/JでBeanをそのまま保存したい。
Content-type: html/text
Tags: GAE/J
Date: 2011/06/18
Public: yes

GAE/J のコードを書いていると１個しか作らない Bean
をちょいと保存したい事が良く有る。
<p/>
JDO や Model を作るのはたるいので
Serialiserで逃げていたのだがやはりいろいろ
問題が出て来る。
<p/>
Memcache 程度のAPIで DataStore に Bean を保存できないかと
思ってライブラリを書いてみたらあっさり動いた。
<p/>
もうちょっと機能追加したい部分もあるがここで一旦、公開しとく。
<p/>


ソース：http://kotemaru.googlecode.com/svn/trunk/storedbean/<br/>
バイナリ：http://code.google.com/p/kotemaru/downloads/list<br/>
Javadoc：http://kotemaru.googlecode.com/svn/trunk/storedbean/docs/javadoc/index.html

<p/>

以下はライブラリの詳細。
<br>- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

<h1><a name="storedbean_v1.0"></a>storedbean v1.0<a href="#storedbean_v1.0" class="section_anchor"></a></h1>
<ul><li>author 2011.06.18 kotemaru.org </li></ul><h2><a name="概要"></a>概要<a href="#概要" class="section_anchor"></a></h2>
<p>storedbean は GAE 上で簡易に Bean インスタンスを DataStore<a href="/p/kotemaru/w/edit/DataStore">?</a> に永続化する事を目的とするライブラリです。 </p>
<p>環境設定を保存するような Bean は通常インスタンスは一つしか存在せず複数の Bean が構造化されることも有ります。 </p>
<p>このような Bean の為に JDO や Slim3 の Model をちゃんと定義する事は以外な負担となります。 </p>
<p>Serialize を使う方法も有りますが後々、互換性の問題を引き起こしたりデータの可読性が悪くなる問題があります。 </p>
<p>これらの問題を解決し気軽に作った Bean をそのまま永続化できるようにしたものが本ライブラリです。 </p>
<h2><a name="使い方"></a>使い方<a href="#使い方" class="section_anchor"></a></h2>
<ol>
<li>storedbean-1.0.x.jar をビルトパスに追加します。 </li>
<li>保存したい Bean に StoredBean<a href="/p/kotemaru/w/edit/StoredBean">?</a> インターフェースを実装します。 </li>
<ul>
<li>StoredBean<a href="/p/kotemaru/w/edit/StoredBean">?</a> にはメソッドはありません。 </li>
</ul>
<li>StoredBeanService<a href="/p/kotemaru/w/edit/StoredBeanService">?</a>#put で保存します。 </li>
<li>StoredBeanService<a href="/p/kotemaru/w/edit/StoredBeanService">?</a>#get で取得します。 </li>
</ol>

<h3><a name="サンプルコード"></a>サンプルコード<a href="#サンプルコード" class="section_anchor"></a></h3>
<pre class="prettyprint">import org.kotemaru.gae.storedbean.StoredBean;
import org.kotemaru.gae.storedbean.StoredBeanService;

// Bean の定義
public class TestBean implements StoredBean {
	private int item01;
	private String item02;

	public int getItem01() {return item01;}
	public void setItem01(int item01) {this.item01 = item01;}
	public String getItem02() {return item02;}
	public void setItem02(String item02) {this.item02 = item02;}
}

// Bean に値を設定。
TestBean bean = new TestBean();
bean.setItem01(123);
bean.setItem02(&quot;abc&quot;);

StoredBeanService sbs = new StoredBeanService(&quot;StoredBean&quot;);
String key = &quot;key-name&quot;;
// 保存
sbs.put(key, bean);
// 復元
TestBean restoreBean = (TestBean) sbs.get(key);</pre><ul><li>全体としてはほぼ Map と同じように使えます。 </li><li>StoredBeanService<a href="/p/kotemaru/w/edit/StoredBeanService">?</a>コンストラクタの引数は保存先DataStore<a href="/p/kotemaru/w/edit/DataStore">?</a>のkindです。 </li><li>key-name は保存先の名前で任意の文字列です。 </li><li>復元時は Memcache を利用しますので性能を気にする必要はありません。 </li><li>保存したデータは GAE の管理画面から編集する事が可能です。 </li><ul><li>※管理画面から編集後は Memcache のクリアをしてください。 </li></ul></ul>
<h3><a name="の状態"></a>DataStore<a href="/p/kotemaru/w/edit/DataStore">?</a> の状態<a href="#の状態" class="section_anchor"></a></h3>
<p>サンプルを実行するとDataStore<a href="/p/kotemaru/w/edit/DataStore">?</a>は以下のような状態になります。 </p>
<p>

<table class="wikitable">
<tr>
<td style="border: 1px solid #ccc; padding: 5px;">
<img src="http://kotemaru.googlecode.com/svn/trunk/storedbean/docs/storedbean-ds-view.png" />
</td>
</tr> 
</table>

</p>
<p>そのまま編集も可能です。 </p>
<p>

<table class="wikitable">
<tr>
<td style="border: 1px solid #ccc; padding: 5px;">
<img src="http://kotemaru.googlecode.com/svn/trunk/storedbean/docs/storedbean-ds-edit.png" />
</td>
</tr> 
</table>

</p>
<p/>
<h2><a name="制限"></a>制限<a href="#制限" class="section_anchor"></a></h2>
<p>StoredBean<a href="/p/kotemaru/w/edit/StoredBean">?</a> として保存可能な Bean には幾つかの制限があります。 </p>
<ul><li>Bean の制限 </li><ul><li>一般的な Bean の規約に従っていなければなりません。 </li>
</ul>
</ul>
<ul>
<li>項目の型の制限 </li>
<ul>
<li>int,long,boolean,String,byte[]<a href=""></a>,List,Set,StoredBean<a href="/p/kotemaru/w/edit/StoredBean">?</a> のみが利用可能です。 </li>
<li>List,Setの項目は Integer,Long,Boolean,String,StoredBean<a href="/p/kotemaru/w/edit/StoredBean">?</a> のみが利用可能です。 </li>
</ul>
</ul>
<ul>
<li>復元時の制限 </li>
<ul>
<li>List,Set が復元されると実体として元の型とはならず ArrayList<a href="/p/kotemaru/w/edit/ArrayList">?</a>,HashSet<a href="/p/kotemaru/w/edit/HashSet">?</a> となります。 </li>
</ul>
</ul>

<h2><a name="コンパイル"></a>コンパイル<a href="#コンパイル" class="section_anchor"></a></h2>
<p>Eclipseでビルド後 build.xml の Ant実行 からターゲット jar を実行してください。 </p>
<p>storedbean-1.0.x.jar が生成されます。 </p>



