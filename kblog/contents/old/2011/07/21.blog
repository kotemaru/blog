Subject: アノテーション＋Velocityでソースコードの自動生成 
Content-type: html/text
Tags: java
Date: 2011/07/21
Public: yes

<style>
ul {
	padding-left: 1em;
}
</style>

アノテーションでソースコードが自動生成できるように
なったのはJavaの言語仕様上革命的だと思うのだが
いまいち認識されていない気がする。
<p/>
多分、アノテーションプロセッサを実装するのが
非常に敷居が高いせいではないかと思う。
<p/>

そこで、アノテーションクラスと Velocity
のテンプレートだけ書くと簡単な注釈処理が作れる
フレームワーク的な物を作ってみた。
<p/>
フレームワークのブランク・プロジェクトのURLは以下。
<ul><li>https://kotemaru.googlecode.com/svn/tags/apt-helper-dir-bata/apt-helper-blank</li></ul>


<h3>プロセッサのソース</h3>
<p/>
最小だと @ProcessorGenerate を定義したアノテーションクラスと
対応する Velocity のテンプレートを作成するだけ。

<p><img border=1 src="/old/img/lovelog/apt-helper-1.png"/></p>


<ul><li>src/sample/annotation/SimpleAnno.java:
<xmp>package sample.annotation;
import java.lang.annotation.*;
import org.kotemaru.apthelper.annotation.ProcessorGenerate;

@ProcessorGenerate(
	template="SimpleAnno.vm", // Velocityのテンプレートファイル名。
	path=".",                 // 出力先パッケージへの相対パス。
	suffix="Impl"             // 出力クラス名に追加する文字列。
	//helper=MyHelper.class   // ユーザ定義のの補助クラス。
)
@Retention(RetentionPolicy.CLASS)
@Target(ElementType.TYPE)
public @interface SimpleAnno {
	String name() default "default";
	String type() default "default";
	String value() default "default";
}
</xmp></li></ul>

@ProcessorGenerate は僕の作ったアノテーションで
パラメータにしたがったアノテーション・プロセッサを自動生成する。


<ul><li>src/sample/annotation/SimpleAnno.vm:
<xmp>#*
定義済変数
${packageName}      : このクラスのパッケージ名
${className}        : このクラスのクラス名
${masterClassDecl}  : アノテーションの定義された元クラスの TypeDeclaration
${annotation}       : 元クラスに定義されたアノテーション
${helper}           : ユーザ定義の補助クラスインスタンス
*#
package ${packageName};
public class ${className} implements ${masterClassDecl} {
	public boolean ${annotation.name()}(${annotation.type()} arg) {
		return arg.equals(${annotation.value()});
	}
}
</xmp></li></ul>

@ProcessorGenerateのtemplateで指定されたVelocityテンプレート。
<p/>
${masterClassDecl}から元クラスのメソッドやフィールドの情報がたどれるが Mirror API の知識は必要。
<ul><li>http://java.sun.com/javase/ja/6/docs/ja/jdk/api/apt/mirror/index.html</li></ul>
${helper}は Velocity の機能だけでは足りなくなるので Java を呼べるようにしている。
この例では使っていない。
<p/>

<h3>プロセッサの作成</h3>
<p/>
これでプロジェクトをビルドすると @SimpleAnno が使える
アノテーションプロセッサ apt-sample-1.0.jar  が生成される。
(jarの名前は build-jar.xml に記述)

<p><img border=1 src="/old/img/lovelog/apt-helper-2.png"/></p>

<p/>

<h3>プロセッサを適用するプロジェクト</h3>
<p/>
作成したプロセッサを使用する別のプロジェクトを用意する。
<br/>サンプルのURLは以下。
<ul><li>https://kotemaru.googlecode.com/svn/tags/apt-helper-dir-bata/apt-helper-use-test</li></ul>

このプロジェクトには作成した apt-sample-1.0.jar 
とブランクプロジェクトの lib/
の下の *.jar をコピーしてアノテーション・ファクトリに登録し、
apt-sample-1.0.jar をビルドパスに入れる。
<p><img border=1 src="/old/img/lovelog/apt-helper-5.png"/></p>
<p><img border=1 src="/old/img/lovelog/apt-helper-6.png"/></p>

<h3>プロセッサを適用してソースコードを生成</h3>
<p/>
自前のアノテーション @SimpleAnno を使うソースを作成する。
<p><img border=1 src="/old/img/lovelog/apt-helper-7.png"/></p>

<ul><li>src/test/master/SimpleAnnoTest.java:
<xmp>package test.master;
import  sample.annotation.*;

@SimpleAnno(name="hogehoge", type="Integer", value="Integer.valueOf(10)")
public class SimpleAnnoTest {
	// dummy.
}
</xmp></li></ul>

これをビルドすると .apt_generated/ に SimpleAnno.vm をテンプレートとする
SimpleAnnoTestImpl.java が生成され
コンパイルもされる。

<p><img border=1 src="/old/img/lovelog/apt-helper-8.png"/></p>

<ul><li>.apt_generated/test/master/SimpleAnnoTestImpl.java:
<xmp>package test.master;
public class SimpleAnnoTestImpl implements test.master.SimpleAnnoTest {
	public boolean hogehoge(Integer arg) {
		return arg.equals(Integer.valueOf(10));
	}
}
</xmp></li></ul>

コンパイル時には SimpleAnnoTestImpl.java は存在するので
他のソースから SimpleAnnoTestImpl クラスを参照しても問題無い。

<hr  style="margin:40px;"/>

apt-helper-1.0.jar のソースは以下。
<ul><li>https://kotemaru.googlecode.com/svn/tags/apt-helper-dir-bata/apt-helper</li></ul>

もうちょっと複雑な例は AutoBean の方を見てください。
<p/>
Mirror API を理解しないと使えない事には変わり無いのですが
標準の Visiter 方式に比べれば遥かに分かり易いですし
ファクトリとプロセッサが自動生成されるだけでも
ずいぶん敷居が下がると思います。
<p/>
ドキュメント他、色々足りていませんが需要があれば頑張ります。
コメントに入れてください。
<p/>
<br/><br/>
関連記事:
<a href="/kotemaru/archives/9539738.html">Javaのアノテーションでsetter/getterを自動生成してみた</a>


