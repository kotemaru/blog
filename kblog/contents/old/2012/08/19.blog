Subject: C#.NETで覚えたことJavaと比較しつつ忘備録
Content-type: html/text
Tags: C#
Date: 2012/08/19
Public: yes

<h3>Webアクセス</H3>

とても簡単。System.Net.WebClientを使うだけ。jakartaのHttpClient相当。
<li>http://msdn.microsoft.com/ja-jp/library/system.net.webclient.aspx
<p/>
文字コードを自動判定するDownloadString()はバグっているらしいので自力で文字コード処理が必要。
<li>http://bluewatersoft.cocolog-nifty.com/blog/2011/08/net-webclient-e.html
<p/>
<xmp>
using System.Net;
static string getWebData(string url)
{
	WebClient wc = new System.Net();
	byte[] data = wc.DownloadData(url);
	Encoding enc = Encoding.GetEncoding("utf-8");
	return enc.GetString(data);
}
</xmp>


<h3>XMLとXPath</H3>

System.Xmlに一通りそろっている。<br/>
<p/>http://msdn.microsoft.com/ja-jp/library/gg145036
<p/>
クラス名の頭にXmlが付くのがウザイかも。<br/>
その他は普通にDOMな感じ。
<p/>
名前空間付きのXPath処理でちゃんとリゾラバ用意しないといけない。<br/>
JavaだとlocalNameだけでも許容してくれたんだが。
<p/>
<pre>
using System.Xml;

static getODataProperty(url) {
	string xml = getWebData(url);
	XmlDocument xmlDocument = new XmlDocument();
	xmlDocument.LoadXml(xml);

	XmlNamespaceManager resolver = new XmlNamespaceManager(xmlDocument.NameTable);
	resolver.AddNamespace("ns", "http://www.w3.org/2005/Atom");
	resolver.AddNamespace("m", "http://schemas.microsoft.com/ado/2007/08/dataservices/metadata");
	resolver.AddNamespace("d", "http://schemas.microsoft.com/ado/2007/08/dataservices");

	XmlNodeList nodeList = xmlDocument.SelectNodes("/ns:entry/ns:content/m:properties/d:Name", resolver);
	if (nodeList.Count == 0) return null;
	return nodeList[0].InnerText;
}
</pre>

<h3>文字列定数</H3>
最初なんじゃこれ？と思った @ 付きの文字列定数。here string と言うらしい。
「\」や改行をそのまま文字列内に書ける。
<p/>
使ってみると便利。Javaにも欲しいかも。
<p/>
<xmp>string fileName = @"c:\temp\test.log";
string sql = @"
SELECT * FROM table1
WHERE a=1
OERDER b ASC
";
</xmp>
<p/>
Windowsではファイル名指定で必須だったんだろう。<br/>
Javaでも正規表現を書くときに欲しいのでJDK1.8で取り入れてくれないだろうか。
<p/>

<h3>App.config</H3>

単純にシステムプロパティなんだけど外部ファイルになっていてファイル名の決まりがあるのは便利。<br/>
Javaの場合、アプリ毎にプロパティファイルが違うので標準化してもいいと思うんだが。

<h3>正規表現</h3>

System.Text.RegularExpressions.Regexから普通に使える。<br/>

JavaのStringに直接正規表現を使えるのは最初どうかと思ったのだがこう見ると便利だね。
<p/>
<xmp>using System.Text.RegularExpressions;

string fileNameCs = Regex.Replace(fileName, @"\.java$", ".cs");
</xmp>

<h3>setter/getter</h3>
JavaのBeanはpublicフィールドでいいじゃね？と常々思っていたので
プロパティの考え方は有りだとは思うのだが代入演算で副作用が発生するのは
発見困難なバグを作り出しそうで気持ち悪い。
<p/>
設計の問題で言語仕様上はできても良いとは思うのだが必ずやるやつがいるんだよね。
まあ演算子のオーバライド全般に言えるんだけど。
<p/>
<xmp>
class Hoge {
	public string Name {set;get;}
	private int id;
	public int Id
	{
		get
		{
			return this.id;
		}
		set {
			this.id = value;
		}
	}
}
</xmp>


<h3>初期化でthisが使えない</h3>

クラスフィールドの初期化でthisが参照できないのは不便すぎる何とかしてくれ。
<p/>
<xmp>
class Hoge {
	private Foo foo = new Foo(this); // <- thisは使えませんエラー

	public Hoge() {
		this.foo = new Foo(this);    // <- こっちはOK
	}
}
</xmp>



<h3>雑感</h3>

似てるようでいて思想の違いを感じるねJavaとC#って。<br/>
どっちが良いっていうのは無くて慣れてるほう使えばって感じかな。<br/>
<p/>
でも、名前の1文字目が大文字は気持ち悪いよ！


