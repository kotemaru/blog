Subject: Nexus7からUSB赤外線リモコンを操る(後編)
Content-type: markdown/text
Tags: android,java,nexus7
Date: 2014/02/23
Public: yes

「[Nexus7からUSB赤外線リモコンを操る(前編)](/2014/02/21/android-ir-remocon-1.html)」[「(中編)」](/2014/02/22/android-ir-remocon-2.html)の続きです。
先に前/中編をみてください。


### 赤外線リモコンキットのプロトコル

フォーラムにもなぜかプロトコルについての資料がありません。
ファームウェアのソース公開されているので自分で調べろ(or決めろ)って事でしょうか。

仕方ないのでこちらのサイトを参考にファームのソースからプロトコルを調べました。

  - [親指サイズの USB 赤外線リモコンが面白い](http://dsas.blog.klab.org/archives/52097996.html)

#### 基本形

パケットは64バイトの固定長です。

要求パケットの１バイト目にコマンドのコードが入り、
応答パケットの１バイト目に同じコマンドのコードが入って戻ってきます。

パケットの２バイト目以降が要求パラメータまたは応答の戻り値となっています。

応答にエラーコードと言うものは無いようなので Timeout で検出と思われます。

#### 家電のリモコンから赤外線データの受信

リモコンから赤外線データを受信するにはデバイスを受信モードにしデータを取得してから受信モードを終了します。

<table  class="KTable" width="95%">
<tr><th colspan=2>操作</th><th width="99%">パケットデータ(64byte固定)</th></tr>
<tr><td colspan=3>受信モード開始</td></tr>
<tr><td>(1)</td><td align=right><nobr>　　要求-></nobr></td><td><code>0x53,0x01,0xff…0xff</code></td></tr>
<tr><td>(2)</td><td align=right><nobr>　　応答<-</nobr></td><td><code>0x53,0x00,0x00…0x00</code></td></tr>
<tr></tr>
<tr><td colspan=3>データ取得（繰り返す）</td></tr>
<tr><td>(3)</td><td align=right><nobr>　　要求-></nobr></td><td><code>0x52,0xff,0xff…0xff</code></td></tr>
<tr><td>(4)</td><td align=right><nobr>　　応答<-</nobr></td><td><code>0x52,<font color="orange">0xXX</font>,0xXX…0xXX</code></td></tr>
<tr></tr>
<tr><td colspan=3>受信モード終了</td></tr>
<tr><td>(5)</td><td align=right><nobr>　　要求-></nobr></td><td><code>0x53,0x00,0xff…0xff</code></td></tr>
<tr><td>(6)</td><td align=right><nobr>　　応答<-</nobr></td><td><code>0x53,0x00,0x00…0x00</code></td></tr>
</table>

リモコンからまだ赤外線データを受け取っていない場合は (4) の応答の２バイト目が
0x00 となる為、データが取得できるまで (3),(4) を繰り返します。

#### デバイスから赤外線データの送信

取得したデータを送信します。

(4) で受け取ったデータの１バイト目を送信コマンド(0x61)に差し替えて要求するだけです。<br>
投げっぱなしで応答は有りません。

<table  class="KTable" width="95%">
<tr><th colspan=2>操作</th><th width="99%">パケットデータ(64byte固定)</th></tr>
<tr><td colspan=3>データ送信</td></tr>
<tr><td>(7)</td><td align=right><nobr>　　要求-></nobr></td><td><code>0x61,0xXX,0xXX…0xXX</code></td></tr>
</table>

### プロトコルの実装

#### 家電のリモコンから赤外線データの受信

応答が非同期となるのでリスナインターフェースを用意します。
後は、パケットを作って非同期タスクに投げるだけです。

	public interface IrrcResponseListener {
		public void onIrrcResponse(byte[] data);
	}

	public void startReceiveIR(IrrcResponseListener listener) {
		byte[] buff = initBuffer(new byte[PACKET_SIZE], (byte) 0xff);
		buff[0] = RECEIVE_IR_MODE_CMD;
		buff[1] = 1;
		new RequestAsyncTask(listener).request(buff, true, false);
	}

	public void endReceiveIR(IrrcResponseListener listener) {
		byte[] buff = initBuffer(new byte[PACKET_SIZE], (byte) 0xff);
		buff[0] = RECEIVE_IR_MODE_CMD;
		buff[1] = 0;
		new RequestAsyncTask(listener).request(buff, true, false);
	}

	public void getReveiveIRData(IrrcResponseListener listener) {
		byte[] buff = initBuffer(new byte[PACKET_SIZE], (byte) 0xff);
		buff[0] = RECEIVE_IR_DATA_CMD;
		new RequestAsyncTask(listener).request(buff, true, true);
	}

#### デバイスから赤外線データの送信

パケットを作って非同期タスクに投げるだけです。

	public void sendData(byte[] buff) {
		buff[0] = SEND_IR_CMD;
		new RequestAsyncTask(null).request(buff, false, false);
	}

#### 非同期タスク

応答有無、リトライ有無の指定にしたがってプロトコルにそった送受信を行っているだけです。<br>
異常系やキャンセル処理への考慮は不十分です。<br>
＃APIが混乱しているのは仕様ですw

	private class RequestAsyncTask extends AsyncTask<byte[], Void, byte[]> {
		private IrrcResponseListener listener;
		private boolean withResponse = false;
		private boolean withRetry = false;

		public RequestAsyncTask(IrrcResponseListener listener) {
			this.listener = listener;
		}

		public void request(byte[] buff, boolean withResponse, boolean withRetry) {
			this.withResponse = withResponse;
			this.withRetry = withRetry;
			execute(buff);
		}

		@Override
		protected byte[] doInBackground(byte[]... args) {
			Log.d(TAG, "RequestAsyncTask start");
			try {
				byte[] reqData = args[0];
				byte[] resData = null;
				boolean isRetry = false;
				do {
					doRequest(reqData);
					if (withResponse) {
						resData = doResponse();
						if (resData[0] != reqData[0]) {
							Log.e(TAG, "Bad resposne code " + resData[0]);
							return null;
						}
						if (withRetry && resData[1] == 0x00) {
							sleep(500);
							isRetry = true;
						} else {
							isRetry = false;
						}
					}
				} while (isRetry);
				return resData;
			} catch (Throwable t) {
				Log.e(TAG, t.getMessage(), t);
				return null;
			}
		}

		@Override
		protected void onPostExecute(byte[] result) {
			if (listener != null) {
				listener.onIrrcResponse(result);
			}
		}
		private void doRequest(byte[] buff) throws IOException {
			…省略（中編参照）
		}
		private byte[] doResponse() throws IOException {
			…省略（中編参照）
		}
	}

### 動かしてみる

受信と送信のボタン２つだけの Activity を作って動かしてみました。

<img src="/2014/02/23/android-ir-remocon-3-6.png" />

Nexus7に繋げるのですがここで一つ問題が。<br>
赤外線リモコンキットのコネクタは Mini-USB なので micro-USB
と直結しようとするとレアなケーブルが必要で手持ちに有りませんでした。

<img src="/2014/02/23/android-ir-remocon-3-1.jpg" />

結果こんな事に(笑)<br>

<img src="/2014/02/23/android-ir-remocon-3-3.jpg" />

それはそれとして、<br>
アプリの受信ボタンをタップしてからデバイスの受光部分に向けてリモコンを操作します。<br>
電源ボタンを押してみました。

<img src="/2014/02/23/android-ir-remocon-3-2.jpg" />

デバイスを家電機器に向けてアプリの送信ボタンをタップすると無事、家電の電源が入って実験成功です。

<img src="/2014/02/23/android-ir-remocon-3-4.jpg" />　
<img src="/2014/02/23/android-ir-remocon-3-5.jpg" />

### まとめ

これで Nexus7 から赤外線リモコンキットを操作することが可能になりました。

基本的に Android から USBデバイスを操作するのは同じ流れで行けると思うのですが
やはり OSが一部デバイスをアプリに使わせてくれないのは致命的な問題のような気がします。
普通のUSBデバイスはファームの書き換えなんてさせてくれませんから。

追々、リモコンアプリを作って行きたいのですが
ボタン配置のカスマイズをできるようにしないといけないので以外に難しそうです。

  - 作りました => [USB赤外線リモコン アプリ](/2014/03/01/android-ir-remocon-app.html)

ソース全体は以下のSVNを参照して下さい。

  - [https://kotemaru.googlecode.com/svn/trunk/androidIrRemoconTest](https://kotemaru.googlecode.com/svn/trunk/androidIrRemoconTest)


